<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Migrasi Windows ke Linux</title>
    <url>/2020/03/31/windows-ke-linux/</url>
    <content><![CDATA[<p>Banyak orang beranggapan bahwa menggunakan linux mesti belajar dengan keras, bahkan ada yang beranggapan migrasi ke linux itu sangat menakutkan. buang jauh pikiran itu semua, karena ada cara yang sangat sederhana untuk membantu proses migrasi ini.</p>
<p>Disini saya akan mencoba membantu mempermudah tahapan migrasi dari Windows ke Linux. Mudah-mudahan setelah membaca postingan ini, pembaca yang budiman (yang masih ragu untuk menggunakan linux) memiliki perencanaan yang matang sehingga tahapan migrasi yang dilakukan akan berjalan sesuai keinginan.</p>
<h4 id="Pilih-distro-Linux-secara-bijaksana"><a href="#Pilih-distro-Linux-secara-bijaksana" class="headerlink" title="Pilih distro Linux secara bijaksana"></a><strong>Pilih distro Linux secara bijaksana</strong></h4><p>Ini adalah kunci utama. Banyak sekali distro linux yang beredar saat ini, boleh dibilang hampir untuk setiap jenis penggunaan. Bahkan ada distro linux yang memiliki tampilan sangat mirip dengan windows (ini bukan mencontoh lho, tapi hanya taktik untuk mempermudah tahapan migrasi). Saran saya jangan langsung mencoba slackware, bisa bunuh diri ntar.</p>
<p>Kebanyakan pengguna Windows akan bermigrasi pada salah satu distribusi utama (Ubuntu, Red Hat atau Fedora, OpenSUSE) karena alasannya: dukungan. Misalnya distro Ubuntu yang memiliki sekian banyak pengguna dan komunitas.</p>
<h4 id="Mulai-menggunakan-software-yang-serupa-sebelum-bermigrasi"><a href="#Mulai-menggunakan-software-yang-serupa-sebelum-bermigrasi" class="headerlink" title="Mulai menggunakan software yang serupa sebelum bermigrasi"></a><strong>Mulai menggunakan software yang serupa sebelum bermigrasi</strong></h4><p>Tahap migrasi akan jauh lebih mudah setelah mencoba menggunakan aplikasi Linux di Windows. Misalnya membiasakan diri berinternet dengan Firefox atau Google Chrome, mengedit photo dengan GIMP, bikin dokumen dengan OpenOffice, ganti Outlook anda dengan Evolution atau Thunderbird, dan banyak aplikasi lainnya.</p>
<h4 id="Periksa-Hardware-yang-digunakan"><a href="#Periksa-Hardware-yang-digunakan" class="headerlink" title="Periksa Hardware yang digunakan"></a><strong>Periksa Hardware yang digunakan</strong></h4><p>Salah satu masalah klasik pada tahap migrasi ke Linux adalah ketidak cocokan hardware, meskipun ini akan menjadi kisah masa lalu karena semakin banyaknya hardware yang mulai dikenal di linux. Sebelum melakukan migrasi, pastikan hardware yang digunakan akan berfungsi seperti yang diharapkan. Misalnya : LAN Card, VGA, Sound Card.</p>
<h4 id="Instalasi-Software"><a href="#Instalasi-Software" class="headerlink" title="Instalasi Software"></a><strong>Instalasi Software</strong></h4><p>Di Windows, proses instalasi softwarenya tidak lebih dari double klik file dan kemudian mengklik tombol Next (yang seakan-akan tidak berhujung). Di Linux proses instalasi perangkat lunak akan lebih terpusat. Silahkan lihat di Add/Remove Software. Ini adalah perubahan mendasar pada filsafat Windows. Pikirkan bahwa Add/Remove Software sebagai pusat perbelanjaan untuk perangkat lunak bukan lokasi untuk mengatur perangkat lunak sudah terinstall.</p>
<h4 id="Lebih-dari-satu-cara…"><a href="#Lebih-dari-satu-cara…" class="headerlink" title="Lebih dari satu cara…"></a><strong>Lebih dari satu cara…</strong></h4><p>Salah satu filosofi yang membuat saya tertarik untuk menggunakan Linux adalah banyaknya cara untuk menyelesaikan problem di Linux. Dengan Windows umumnya ada satu cara untuk menangani tugas – cara Windows. Dengan Linux selalu ada cara untuk melakukan sesuatu. Hal ini seringkali sangat membingungkan bagi para pengguna baru, terutama ketika berada di suatu milis atau forum untuk membantu dan mendapatkan lima jawaban berbeda dengan lima cara yang berbeda untuk memecahkan masalah tunggal.</p>
<p>Sebagian dari kalian (para suhu) mungkin berpikir bahwa ini adalah kisah usang atau cerita lama. Tapi bagi yang baru ingin menggunakan Linux, ini dapat menghemat banyak waktu serta mengurangi sakit kepala. Hehe…</p>
<p>Sekian tulisan dari saya kali ini, jika ada yang kurang atau ingin bertanya bisa post response di bawah sini ya.</p>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>os</tag>
        <tag>linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript ES6 Part 4 - Array Helper (Find, Every, Some, Reduce)</title>
    <url>/2020/03/31/javascript-es6-part4/</url>
    <content><![CDATA[<h3 id="find"><a href="#find" class="headerlink" title="find()"></a><strong>find()</strong></h3><p>fungsi method find() adalah untuk mempermudah ketika ingin mencari sebuah data. Proses yang dilakukan method find() mirip dengan method filter() hanya saja yang dilakukan method find() hanya mengembalikan sebuah data saja. Code find-1.js adalah contoh proses method find() menggunakan looping biasa, sedangkan code find-2.js adalah code menggunakan method find().</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code menggunakan looping biasa</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [&#123; <span class="attr">name</span>: <span class="string">'juggernaut'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'nyx'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'io'</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findHero = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; heroes.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (heroes[i].name === <span class="string">'nyx'</span>) &#123;</span><br><span class="line">    findHero = heroes[i];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findHero); <span class="comment">//&#123; name: 'nyx' &#125;</span></span><br></pre></td></tr></table></figure>

<p>Jika dicermati baik-baik code diatas mirip dengan code filter-1.js, bedanya terdapat proses break (code baris 12) pada looping, ini menunjukan bahwa proses looping akan berhenti.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code menggunakan find() helper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [&#123; <span class="attr">name</span>: <span class="string">'juggernaut'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'nyx'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'io'</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findHero = heroes.find(<span class="function"><span class="params">hero</span> =&gt;</span> hero.name === <span class="string">'nyx'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findHero); <span class="comment">//&#123; name: 'nyx' &#125;</span></span><br></pre></td></tr></table></figure>

<p>Seperti yang sudah dijelaskan tadi, proses pada method find() mirip dengan method filter() bedanya ketika iterator function mendapatkan sebuah return true maka proses find akan berhenti. Jadi method find() ini cocok digunakan untuk mencari sebuah data.</p>
<h3 id="every-and-some"><a href="#every-and-some" class="headerlink" title="every() and some()"></a><strong>every() and some()</strong></h3><p>Sesuai dengan nama methodnya every() dan some() kedua method ini berfungsi untuk menentukan apakah nilai dari data yang diberikan sesuai dengan kondisi yang diinginkan. Methodevery() hanya memberikan nilai true ketika semua data sesuai dengan kondisi yang ditentukan sedangkan method some() akan memberikan nilai true ketika minimal ada satu data yang sesua dengan kondisi yang ditentukan.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code every() dan some() menggunakan looping forEach()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> computers = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Apple'</span>, <span class="attr">ram</span>: <span class="number">24</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Compaq'</span>, <span class="attr">ram</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Acer'</span>, <span class="attr">ram</span>: <span class="number">32</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requirementCheck</span>(<span class="params">minimunRam, dataComputers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> allComputersCanRunProgram = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> onlySomeComputersCanRunProgram = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  dataComputers.forEach(<span class="function"><span class="params">computer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (computer.ram &lt; minimunRam) &#123;</span><br><span class="line">      allComputersCanRunProgram = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      onlySomeComputersCanRunProgram = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    every: [allComputersCanRunProgram],</span><br><span class="line">    some: [onlySomeComputersCanRunProgram]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(requirementCheck(<span class="number">16</span>, computers).every); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(requirementCheck(<span class="number">1</span>, computers).every); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(requirementCheck(<span class="number">16</span>, computers).some); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(requirementCheck(<span class="number">1</span>, computers).some); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code every() dan some() helper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> computers = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Apple'</span>, <span class="attr">ram</span>: <span class="number">24</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Compaq'</span>, <span class="attr">ram</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Acer'</span>, <span class="attr">ram</span>: <span class="number">32</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(computers.every(<span class="function"><span class="params">computer</span> =&gt;</span> computer.ram &gt; <span class="number">16</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(computers.every(<span class="function"><span class="params">computer</span> =&gt;</span> computer.ram &gt; <span class="number">1</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(computers.some(<span class="function"><span class="params">computer</span> =&gt;</span> computer.ram &gt; <span class="number">16</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(computers.some(<span class="function"><span class="params">computer</span> =&gt;</span> computer.ram &gt; <span class="number">1</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>Pada code tersebut mengecek apakah semua computer memiliki ram diatas 16 dan jawabannya adalah tidak semuat atau not every computer memiliki nilai ram diatas 16 maka nilainya adalah false. Pernah belajar operasi logika matematika? yang pernah sekolah pasti pernah tau yang namanya operasi logika matematika. Pada proses ini operator yang digunakan adalah operator “dan” atau lambang matematikanya “^” operator ini hanya meberikan nilai true ketika nilai semuanya bernilai true.</p>
<p>Nah kalo proses some() operator yang digunakan adalah “atau” lambang matematikanya “v” operator ini akan memberikan nilai true ketika minimal ada satunilai yang bernilai true.</p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a><strong>reduce()</strong></h3><p>Ok akhirnya sampai di method helper terakhir yaitu reduce(). Bisa dibilang reduce() ini adalah method helper yang paling fleksibel, kalian bisa mengimplementasi method helper sebelumnya menggunakan reduce(). Saya disini akan memberi contoh dari yang mudah yaitu menggunakan basic looping.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code summary menggunakan looping biasa</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">  sum += numbers[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//60</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code summary menggunakan method reduce()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  numbers.reduce(<span class="function">(<span class="params">sum, number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sum + number;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">); <span class="comment">//60</span></span><br></pre></td></tr></table></figure>

<p>Pada code reduce-2.js proses yang dilakukan adalah proses summary dari semua number yang terdapat pada variabel numbers. Oh ya pada helper reduce() agak sedikit spesial dikarenakan ada dua argument yang dipakai oleh method ini yaitu argument pertama adalah iterator function dan argument kedua adalah initial value.</p>
<p>Setelah mencoba code reduce-2.js coba ubah nilai sum menjadi 100 atau terserah kalian, berapa hasilnya? Ya hasilnya adalah tetap 60. Why? karena initial value diset dengan nilai 0. Coba kalian ubah initial value dengan nilai 100, pasti hasilnya akan berubah dengan nilai 160.</p>
<p>Sekian tulisan dari saya kali ini, jika ada yang kurang atau ingin bertanya bisa post response di bawah sini ya.</p>
]]></content>
      <categories>
        <category>Pemrograman</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>javascript</tag>
        <tag>pemrograman</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript ES6 Part 3 - Array Helper (ForEach, Map, Filter)</title>
    <url>/2020/03/31/javascript-es6-part3/</url>
    <content><![CDATA[<p>Halo guys, kali ini saya ingin melanjutkan tulisan pengenalan ES6 Javascript. Pada part 3 ini saya akan membahas beberapa Array Helper Methods yang umum digunakan oleh developer. Array Helper Methods yang akan saya bahas diantaranya adalah forEach, map, find, filter, every, some, dan reduce.</p>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><strong>forEach()</strong></h3><p>Jadi fungsi dari method forEach() helper sebenarnya seperti ketika kita membuat looping untuk mengakses isi dari sebuah array. Berikut adalah contoh code-nya forEach-1.js menggunakan perulangan for, sedangkan forEach-2.js menggunakan forEach().</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code menggunakan looping biasa</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> days = [<span class="string">'senin'</span>, <span class="string">'selasa'</span>, <span class="string">'rabu'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; days.length; i++) &#123;</span><br><span class="line">  printDay(days[i]); <span class="comment">// senin selasa rabu</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//iterator function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printDay</span>(<span class="params">day</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code menggunakan forEach() helper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> days = [<span class="string">'senin'</span>, <span class="string">'selasa'</span>, <span class="string">'rabu'</span>];</span><br><span class="line"></span><br><span class="line">days.forEach(<span class="function"><span class="params">day</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(day); <span class="comment">// senin selasa rabu</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Setelah melihat code diatas, apakah sudah paham? misal belum paham saya berikan ilustrasinya forEach() helper. Setiap iterasi pada forEach() helper akan mem-passing setiap objek yang ada di dalam array ke sebuah iterator function . Dalam contoh code forEach-2.js terdapat sebuah arrow function (ini adalah iterator function) yang mempunyai parameter variabel day, artinya setiap objek dalam array tersebut akan dimasukan ke dalam variabel day setiap iterasi. Btw variabel dengan nama day itu bebas ya namanya, mau diganti hari juga gapapa itu hanya menggambarkan satuan objek yang digunakan pada fungsi yang sudah dibuat.</p>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a><strong>map()</strong></h3><p>Bisa dibilang fungsi method map() mirip dengan forEach() namun bedanya pada map() setiap iterator function dipanggil, kita dapat mengembalikan sebuah nilai dan dapat dimasukkan kedalam variabel array yang baru. Coba kalian melakukan return menggunakan forEach() dan menggunakan map() dan bedakan hasilnya menggunakan console.log() contoh code map-ForEach.js. Sebelum itu seperti biasa saya mencotohkan code yang ditulis menggunakan looping biasa dan menggunakan map(). Code map-1.js menggunakan looping biasa dan code map-2.js menggunakan function map().</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code menggunakan looping biasa tanpa fucntion map()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> doubleNumbers = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">  <span class="comment">//numbers[i] = numbers [i] * 2;</span></span><br><span class="line">  doubleNumbers.push(doubleNumberFunction(numbers[i]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//iterator function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doubleNumberFunction</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubleNumbers); <span class="comment">// [ 2, 4, 6 ]</span></span><br></pre></td></tr></table></figure>

<p>Mungkin ada beberapa orang bertanya, kenapa sih harus membuat array baru? kenapa kita tidak mutating array yang sudah ada? dan melakukan fungsi seperti pada baris 5. Kalian bisa membaca tulisan tentang kenapa immutable javascript itu baik <a href="https://wecodetheweb.com/2016/02/12/immutable-javascript-using-es6-and-beyond/" target="_blank" rel="noopener">disini</a>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code menggunakan map() helper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doubleNumbers = numbers.map(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubleNumbers); <span class="comment">// [ 2, 4, 6 ]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code perbandingan map dan forEach</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> doubleNumbersForEach,</span><br><span class="line">  doubleNumbersMap = [];</span><br><span class="line"></span><br><span class="line">doubleNumbersForEach = numbers.forEach(<span class="function"><span class="params">number</span> =&gt;</span> number * <span class="number">2</span>);</span><br><span class="line">doubleNumbersMap = numbers.map(<span class="function"><span class="params">number</span> =&gt;</span> number * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubleNumbersForEach); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(doubleNumbersMap); <span class="comment">//[ 2, 4, 6 ]</span></span><br></pre></td></tr></table></figure>

<p>btw kalo ada yang bingung kok code di baris 4 dan 5 tidak ada syntax return nya? coba kalian lihat tulisan saya part 2 bagian arrow function. Setiap iterasi akan menjalankan iterator function yang telah dibuat. pada code map-2.js iterator function digambarkan pada baris 3–5. Iterator function tersebut mengembalikan hasil nilai variabel number * 2.</p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a><strong>filter()</strong></h3><p>Seperti namanya fungsi method filter() adalah method yang digunakan untuk mempermudah kita ketika ingin menyaring sebuah data. Pada code filter-1.js dicontohkan code ketika kita ingin menyaring data products. Sedangkan code filter-2.js contoh code ketika kita memakai method filter().</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code ketika menggunakan looping biasa</span></span><br><span class="line"><span class="keyword">var</span> products = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'cucumber'</span>, <span class="attr">type</span>: <span class="string">'vegetable'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">type</span>: <span class="string">'fruit'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">type</span>: <span class="string">'fruit'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'orange'</span>, <span class="attr">type</span>: <span class="string">'fruit'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'carrot'</span>, <span class="attr">type</span>: <span class="string">'vegetable'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filteredProducts = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; products.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (products[i].type === <span class="string">'fruit'</span>) &#123;</span><br><span class="line">    filteredProducts.push(products[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filteredProducts);</span><br><span class="line"><span class="comment">// [ &#123; name: 'banana', type: 'fruit' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: 'apple', type: 'fruit' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: 'orange', type: 'fruit' &#125; ]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contoh code ketika menggunakan filter() helper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> products = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'cucumber'</span>, <span class="attr">type</span>: <span class="string">'vegetable'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'banana'</span>, <span class="attr">type</span>: <span class="string">'fruit'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">type</span>: <span class="string">'fruit'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'orange'</span>, <span class="attr">type</span>: <span class="string">'fruit'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'carrot'</span>, <span class="attr">type</span>: <span class="string">'vegetable'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filteredProducts = [];</span><br><span class="line"></span><br><span class="line">filteredProducts = products.filter(<span class="function"><span class="params">product</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> product.type === <span class="string">'fruit'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filteredProducts);</span><br><span class="line"><span class="comment">// [ &#123; name: 'banana', type: 'fruit' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: 'apple', type: 'fruit' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: 'orange', type: 'fruit' &#125; ]</span></span><br></pre></td></tr></table></figure>

<p>Sebenarnya proses filter() mirip seperti map() bedanya pada method filter() return setiap iterator function bernilai boolean (true or false). Setiap return yang bernilai true akan direturn pada result array seperti contoh code filter-2.js. Iterator function pada baris 11–13 berisikan proses untuk menyaring objek yang ada didalam array products yang memiliki type ‘fruit’.</p>
<p>Sekian tulisan dari saya kali ini, jika ada yang kurang atau ingin bertanya bisa post response di bawah sini ya.</p>
]]></content>
      <categories>
        <category>Pemrograman</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>javascript</tag>
        <tag>pemrograman</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript ES6 Part 2 - Arrow Function</title>
    <url>/2020/03/29/javascript-es6-part2/</url>
    <content><![CDATA[<h4 id="jadi-syntax-ini-gt-maksudnya-apa"><a href="#jadi-syntax-ini-gt-maksudnya-apa" class="headerlink" title="jadi syntax ini =&gt; maksudnya apa ?"></a><strong>jadi syntax ini =&gt; maksudnya apa ?</strong></h4><p>Dulu pertama kali saya membaca code ES6, arrow function (=&gt;) membuat saya bingung untuk memahami code tersebut. Setelah saya pelajari sebenarnya arrow function itu hanyalah penyederhanaan penulisan sebuah function. untuk lebih jelasnya kalian bisa mencoba code arrow-1.js di bawah ini. Tapi bukan hanya untuk penyederhanaan saja, memang ada saatnya dimana kita benar-benar harus memakai arrow function.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//contoh 1</span></span><br><span class="line"><span class="keyword">const</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(func1(<span class="number">3</span>, <span class="number">3</span>)); <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contoh 2</span></span><br><span class="line"><span class="keyword">const</span> func2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(func2(<span class="number">3</span>, <span class="number">3</span>)); <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contoh 3</span></span><br><span class="line"><span class="keyword">const</span> func3 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="built_in">console</span>.log(func3(<span class="number">3</span>, <span class="number">3</span>)); <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contoh 4</span></span><br><span class="line"><span class="keyword">const</span> func4 = <span class="function"><span class="params">dobel</span> =&gt;</span> dobel + dobel;</span><br><span class="line"><span class="built_in">console</span>.log(func4(<span class="number">5</span>)); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contoh 5</span></span><br><span class="line"><span class="keyword">const</span> func5 = <span class="function"><span class="params">dobel</span> =&gt;</span> dobel + dobel;</span><br><span class="line"><span class="built_in">console</span>.log(func5(<span class="number">5</span>)); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contoh 6</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> kalidua1 = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * number;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(kalidua1); <span class="comment">//[ 2, 4, 6, 8, 10 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contoh 7</span></span><br><span class="line"><span class="keyword">const</span> kalidua2 = numbers.map(<span class="function"><span class="params">number</span> =&gt;</span> <span class="number">2</span> * number);</span><br><span class="line"><span class="built_in">console</span>.log(kalidua2); <span class="comment">//[ 2, 4, 6, 8, 10 ]</span></span><br></pre></td></tr></table></figure>

<p>Gimana bisa kalian lihat kan? perbedaan tulisan pada contoh code 1–3. Namun outputan dari ketiga potongan code tersebut adalah sama. Perbedaan dari contoh code 1 dan contoh code 2 hanyalah dipenulisan yaitu menghilangkan kata function sebelum paramater dan menambahkan =&gt; setelah parameter. Begitu juga perbedaan dari contoh code 2 dan code 3, karena pada body fungsi tersebut hanya mempunyai single javascript expression maka kita dapat menghilangkan kata return dan kurung kurawalnya.</p>
<p>Sedangkan pada contoh code 4 dan 5, karena function tersebut hanya mempunyai satu argument maka kita dapat menghilangkan kurung buka dan tutupnya. Bagaimana dengan contoh code 6 dan 7? buat yang belum paham dengan array helper mungkin akan merasa bingung. Oke next part kita akan membahas beberapa macam array helper yang sering digunakan pada ES6. Dokumentasi lengkap arrow function bisa kalian lihat di <a href="https://developer.mozilla.org/id/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">sini</a>.</p>
<p>Sekian tulisan dari saya kali ini, jika ada yang kurang atau ingin bertanya bisa post responses di bawah sini ya.</p>
]]></content>
      <categories>
        <category>Pemrograman</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>javascript</tag>
        <tag>pemrograman</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript ES6 Part 1 - Variable</title>
    <url>/2020/03/29/javascript-es6/</url>
    <content><![CDATA[<p>Halo guys, kali ini saya akan sharing sedikit tentang ES6 (ECMA Script 2015). Banyak orang ingin belajar framework atau library tertentu yang menggunakan bahasa Javascript seperti (React, React-Native, Angular, Vue, dll) . Nah tapi merasa kesulitan untuk memahami (seperti saya), salah satu faktornya adalah kita belum tau atau belum paham tentang bahasa yang dipakai oleh framework/library itu sendiri. Oleh karena itu saya ingin sharing tulisan tentang ES6, agar mempermudah developer yang ingin mempelajari suatu framework/library yang menggunakan JS. Btw tulisan ini cocok untuk dibaca oleh orang yang sudah paham tentang basic pemrograman di bahasa tertentu misal java, php, python, dll.</p>
<h3 id="Jadi…-apa-itu-ES6-atau-ECMAScript-2015"><a href="#Jadi…-apa-itu-ES6-atau-ECMAScript-2015" class="headerlink" title="Jadi…. apa itu ES6 atau ECMAScript 2015?"></a><strong>Jadi…. apa itu ES6 atau ECMAScript 2015?</strong></h3><p>ES6 adalah sebuah singkatan dari ECMAScript versi 6. ES6 release pada tahun 2015, jadi ES6 sama ES 2015 sama aja ya. Lalu apa itu ECMAScript? ECMAScript adalah sebuah standarisasi scripting language (Javascript) yang dibuat oleh European Computer Manufacturers Association (ECMA). Bahasa gampangnya ECMAScript itu standarnya, Javascript itu implementasinya.</p>
<p>Untuk menjalankan sebuah program yang ditulis menggunakan ES6 kalian dapat menggunakan NodeJS dengan command dibawah ini. Panduan untuk installasi NodeJS bisa kalian lihat di <a href="https://www.codepolitan.com/tutorial/cara-install-nodejs" target="_blank" rel="noopener">sini</a>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node namaFileJS</span><br></pre></td></tr></table></figure>

<h3 id="Variabel"><a href="#Variabel" class="headerlink" title="Variabel"></a><strong>Variabel</strong></h3><p>Di dalam JavaScript kita tidak perlu mendeklarasikan jenis tipe data. Seluruh variabel di dalam JavaScript dapat berisi nilai apapun (tipe data apapun), dan dapat diubah menjadi tipe lain sepanjang program. Untuk mendeklrasikan sebuah variabel ada 3 cara yaitu menggunakan const, let, dan var.</p>
<p><strong>let dan var :</strong> fungsi dari let dan var sebenarnya sama untuk mendeklarasikan variabel yang nilainya dapat diubah. Namun perbedaanya adalah var mempunyai cakupan dalam sebuah fungsi (function scope) dan let mempunyai cakupan dalam sebuah block (block scope). Bingung apa maksudnya? oke saya akan memberikan sebuah contoh melalui code.</p>
<blockquote>
<p>Untuk mendapatkan experience lebih, harap tidak copy paste contoh code.</p>
</blockquote>
<h4 id="var-function-scope"><a href="#var-function-scope" class="headerlink" title="var (function scope)"></a><strong>var (function scope)</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5`</span></span><br></pre></td></tr></table></figure>

<p>Jika code var-1.js dijalankan maka akan mengeluarkan output yang sesuai pada comment code baris 2 dan 4.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">looping</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">looping();</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>

<p>Nah gimana kalau code var-2.js dijalankan? program akan mengeluarkan output ReferenceError: i is not defined. Kenapa? karena varibel i di deklarasikan menggunakan var di dalam function looping(). Sedangkan pada baris 7 kita memanggi variabel i di luar function looping(). Hal ini menunjukan jika var berjalan pada cakupan function (function scope).</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">looping</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 0 1 2 3 4 5</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inLooping</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inLooping();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">looping();</span><br></pre></td></tr></table></figure>

<p>Bagaimana jika code var-3.js dijalankan? tidak ada error kan? apakah ada yang bingung kenapa baris 6 tidak error padahal variabel i tidak dalam scope function inLooping() ? ini dikarenakan function inLooping() masuk ke dalam scope function looping(). Oleh karena itu variabel i pada baris 6 dapat dipanggil.</p>
<blockquote>
<p>Kesimpulannya variabel yang dideklarasikan menggunakan var hanya dapat dipanggil dalam cakupan sebuah fungsi dimana variabel tersebut dideklarasikan. Child function juga dapat memanggil variabel yang dideklarasikan menggunakan var pada root functionnya (contohnya seperti code var-3.js)</p>
</blockquote>
<h4 id="let-block-scope"><a href="#let-block-scope" class="headerlink" title="let (block scope)"></a><strong>let (block scope)</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>

<p>Jika code let-1.js dijalankan maka akan mengeluarkan output ReferenceError: i is not defined. kenapa? karena batas sebuah block adalah sebuah kurung kurawal { some code here }. Jika kalian lihat pada code let-1.js terdapat block scope (baris 1–3). Variabel i dideklarasikan menggunakan let di dalam block scope tersebut, namun variabel i dipanggil dari luar block scope (baris 4).</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">'100'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'i = '</span>, i); <span class="comment">// i = 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nah jika kalian menjalankan code let-2.js akan mengeluarkan output seperti comment pada baris 2 dan 6. Ini dikarenakan variabel yang dideklarasikan menggunakan let dipanggil dalam block scope masing-masing. Terdapat dua block scope pada code let-2.js (baris 1–3) dan (baris 4–7).</p>
<blockquote>
<p>Kesimpulannya dari dua contoh code diatas adalah variabel yang dideklarasikan menggunakan let hanya dapat dipanggil dalam sebuah block scope yang sama. Sebuah block scope dapat ditandai dengan sebuah kurung kurawal { ….. some code here ….. }</p>
</blockquote>
<h4 id="const-variabel-konstanta"><a href="#const-variabel-konstanta" class="headerlink" title="const (variabel konstanta)"></a><strong>const (variabel konstanta)</strong></h4><p>Sifat const sama seperti let, namun perbedaanya variabel yang dideklarasikan menggunakan const tidak dapat diubah nilainya atau immutable variables.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> phi = <span class="number">3.14</span>;</span><br><span class="line">phi = <span class="number">3.147</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(phi);</span><br></pre></td></tr></table></figure>

<p>Jika code const-1.js dijalankan maka akan mengeluarkan output error TypeError: Assignment to constant variable. Ini menandakan sebuah variabel yang dideklarasikan menggunakan const nilainya tidak dapat diubah atau di-reassign.</p>
<p>Sekian tulisan dari saya kali ini, jika ada yang kurang atau ingin bertanya bisa post responses di bawah sini ya.</p>
]]></content>
      <categories>
        <category>Pemrograman</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>javascript</tag>
        <tag>pemrograman</tag>
      </tags>
  </entry>
</search>
